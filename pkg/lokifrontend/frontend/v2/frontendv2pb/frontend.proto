syntax = "proto3";

package frontendv2pb;

import "github.com/grafana/dskit/httpgrpc/httpgrpc.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "pkg/logproto/logproto.proto";
import "pkg/querier/queryrange/queryrange.proto";
import "pkg/querier/stats/stats.proto";
import "pkg/logqlmodel/stats/stats.proto";
import "pkg/push/push.proto";

option go_package = "frontendv2pb";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Frontend interface exposed to Queriers. Used by queriers to report back the result of the query.
service FrontendForQuerier {
  rpc QueryResult(QueryResultRequest) returns (QueryResultResponse) {}
}

message QueryResultRequest {
  uint64 queryID = 1;
  oneof response {
    httpgrpc.HTTPResponse httpResponse = 2 [deprecated = true];
    queryrange.QueryResponse queryResponse = 4;
  }
  stats.Stats stats = 3;

// There is no userID field here, because Querier puts userID into the context when
// calling QueryResult, and that is where Frontend expects to find it.
}

message QueryResultResponse {}


message LokiStreamingRequest {
    string query = 1;
    uint32 limit = 2;
    int64 step = 3;
    int64 interval = 4;
    google.protobuf.Timestamp startTs = 5 [
      (gogoproto.stdtime) = true,
      (gogoproto.nullable) = false
    ];
    google.protobuf.Timestamp endTs = 6 [
      (gogoproto.stdtime) = true,
      (gogoproto.nullable) = false
    ];
}


message LokiDataStream {
  string ResultType = 1 [(gogoproto.jsontag) = "resultType"];
  repeated logproto.StreamAdapter Result = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "result",
    (gogoproto.customtype) = "github.com/grafana/loki/pkg/push.Stream"
  ];
}

message LokiStreamingResponse {
  string Status = 1 [(gogoproto.jsontag) = "status"];
  LokiDataStream Data = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "data,omitempty"
  ];
  string ErrorType = 3 [(gogoproto.jsontag) = "errorType,omitempty"];
  string Error = 4 [(gogoproto.jsontag) = "error,omitempty"];
  uint32 limit = 6;
  uint32 version = 7;
  stats.Result statistics = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "statistics"
  ];
}


service StreamService {
  rpc FetchResponse(LokiStreamingRequest) returns (stream LokiStreamingResponse) {}
}